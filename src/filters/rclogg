#!/bin/sh
# @(#$Id: rclogg,v 1.2 2008-10-08 08:27:34 dockes Exp $  (C) 2007 J.F.Dockes
#================================================================
# Handle ogg audio files for recoll.
#================================================================
# set variables
LANG=C ; export LANG
LC_ALL=C ; export LC_ALL
progname="rclogg"
filetype=ogg


#RECFILTCOMMONCODE
##############################################################################
# !! Leave the previous line unmodified!! Code imported from the
# recfiltcommon file

# Utility code common to all shell filters. This could be sourced at run
# time, but it's slightly more efficient to include the code in the
# filters at build time (with a sed script).

# Describe error in a way that can be interpreted by our caller
senderror()
{
    echo RECFILTERROR $*
    # Also alert on stderr just in case
    echo ":2:$progname::: $*" 1>&2
    exit 1
}

iscmd()
{
    cmd=$1
    case $cmd in
    */*)
	if test -x $cmd -a ! -d $cmd ; then return 0; else return 1; fi ;;
    *)
      oldifs=$IFS; IFS=":"; set -- $PATH; IFS=$oldifs
      for d in $*;do test -x $d/$cmd -a ! -d $d/$cmd && return 0;done
      return 1 ;;
    esac
}

checkcmds()
{
    for cmd in $*;do
      if iscmd $cmd 
      then 
        a=1
      else 
        senderror HELPERNOTFOUND $cmd
      fi
    done
}

# show help message
if test $# -ne 1 -o "$1" = "--help" 
then
  echo "Convert a $filetype file to HTML text for Recoll indexing."
  echo "Usage: $progname [infile]"
  exit 1
fi

infile="$1"

# check the input file existence (may be '-' for stdin)
if test "X$infile" != X- -a ! -f "$infile"
then
  senderror INPUTNOSUCHFILE "$infile"
fi

# protect access to our temp files and directories
umask 77

##############################################################################
# !! Leave the following line unmodified !
#ENDRECFILTCOMMONCODE

checkcmds ogginfo sed awk

# output the result
echo '<html><head>'
echo '<meta http-equiv="Content-Type" content="text/html;charset=UTF-8">'

if test X$RECOLL_FILTER_FORPREVIEW = Xyes 
then

echo '</head><body><pre>'
ogginfo "$infile" | grep '=' | sed -e 's/&/&amp;/g' -e 's/"/&quot;/g' \
    -e 's/</&lt;/g' -e 's/>/&gt;/g'
echo '</pre></body></html>'

else
    ogginfo "$infile" | grep '=' | awk -F= \
      '{sub("^[ 	]+", "", $1)  
        sub("&", "&amp;", $2)
        sub("\"", "&quot;", $2)
        sub("<", "&lt;", $2)
        sub(">", "&gt;", $2)
        printf "<meta name=\"%s\" content=\"%s\">\n", $1, $2
        body=body $2 "\n"
       }
    END{print "</head><body><pre>";print body;print "</pre></body></html>"}'
fi

# Note: ogginfo output is unparseable: the COMMENT field can be
# multiline, but there is no way to detect the end of the 'User
# comments' area


# exit normally
exit 0
