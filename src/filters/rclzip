#!/usr/bin/env python

# Zip file filter for Recoll

import os
import rclexecm

class ZipExtractor:
    def __init__(self, em):
        self.currentindex = 0
        self.contents = []
        self.zipfile = ""
        self.em = em
    # Execute unzip to retrieve TOC list. Store in self.contents
    def listzip(self):
        cmd = "unzip -Z -1 '%s'"%(self.zipfile)
        f = os.popen(cmd, "r")
        self.contents = f.readlines()
	status = f.close()
	if status:
            return False
        return True

    # Execute unzip to extract and return data for single entry in zip file
    def extractzipentry(self, name):
        cmd = "unzip -p '%s' '%s'"%(self.zipfile, name)
        f = os.popen(cmd, "r")
        data = f.read()
        # self.em.rclog("data: %s" % data)
        status = f.close()
        if status:
            return (False, "")
        return (True, data)

    def extractone(self, ipath):
        (ok, docdata) = self.extractzipentry(ipath)
        eof = (self.currentindex >= len(self.contents) -1)
        return (ok, docdata, ipath, eof)

    ###### File type handler api, used by rclexecm ---------->
    def openfile(self, params):
        self.zipfile = params["filename:"]
        self.currentindex = 0
        return self.listzip()

    def getipath(self, params):
        return self.extractone(params["ipath:"])
        
    def getnext(self, params):
        if self.currentindex >= len(self.contents):
            #self.em.rclog("getnext: EOF hit")
            return (False, "", "", 1)
        else:
            ret= self.extractone(self.contents[self.currentindex].rstrip("\n"))
            self.currentindex += 1
            return ret

e = rclexecm.RclExecM()
e.mainloop(ZipExtractor(e))
